{"version":3,"sources":["actions/booksAction.js","reducers/booksReducer.js","reducers/authorReducer.js","actions/categoriesAction.js","reducers/categoriesReducer.js","actions/bookAction.js","reducers/bookReducer.js","store.js","actions/authorAction.js","container/Book.js","actions/authorsAction.js","container/bookForm.js","presentational/BooksPage.js","container/Dashboard.js","presentational/Navbar.js","presentational/UpdateBookForm.js","presentational/SingleBook.js","container/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["getBooks","type","fetchBooks","dispatch","a","fetch","response","json","data","console","log","payload","initialState","loading","hasErrors","books","authors","fetchCategories","categories","getBookSuccess","book","reducer","combineReducers","state","action","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Book","excerpt","onDelete","author","category","categoryName","className","title","src","img","alt","name","bio","to","id","onClick","fetchAuthors","BookForm","selectionAuthorID","selectionAuthorName","addedAuthorID","addAuthorName","categoryID","handleSubmit","e","preventDefault","method","body","JSON","stringify","headers","authorResponse","author_id","undefined","category_id","booksResponse","setState","props","onSubmit","handleChange","target","value","handleAuthorSelect","handleAuthorUpdate","handleCategorySelection","this","onChange","map","React","Component","connect","useState","isAddingBook","setIsAddingBook","useEffect","showHideAddBookForm","key","DashboardPage","Navbar","onUpdate","localBook","updateBook","updateAddNewAuthorStatus","updateBookRequest","match","params","newBook","setBook","setUpdateBook","fetchBook","filter","getCategory","then","catch","error","HomePage","getTheBooks","mapDispatchToProps","App","Fragment","exact","path","component","Dashboard","BooksPage","SingleBook","Homepage","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ddcb8420.chunk.js","sourcesContent":["export const GET_BOOKS = 'GET BOOKS'\nexport const GET_BOOKS_SUCCESS = 'GET_BOOKS_SUCCESS'\nexport const GET_BOOKS_FAILURE = 'GET_BOOKS_FAILURE'\n\nexport const getBooks = () => ({ type: GET_BOOKS})\nexport const getBooksSuccess = books => ({\n  type: GET_BOOKS_SUCCESS,\n  payload: books,\n})\nexport const getBooksFailure = () => ({ type: GET_BOOKS_FAILURE })\n\nexport function fetchBooks() {\n  return async dispatch => {\n    dispatch(getBooks())\n\n    try {\n      const response = await fetch('http://localhost:3000/book')\n      const data = await response.json()\n      console.log(data);\n\n      dispatch(getBooksSuccess(data))\n    } catch (error) {\n      dispatch(getBooksFailure())\n    }\n  }\n}\n","import * as actions from '../actions/booksAction'\n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  books: [],\n}\n\nexport default function booksReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.GET_BOOKS:\n      return { ...state, loading: true }\n    case actions.GET_BOOKS_SUCCESS:\n      return { books: action.payload, loading: false, hasErrors: false }\n    case actions.GET_BOOKS_FAILURE:\n      return { ...state, loading: false, hasErrors: true }\n    default:\n      return state\n  }\n}\n","import * as actions from '../actions/authorAction'\n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  authors: [],\n}\n\nexport default function authorReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.GET_AUTHORS:\n      return { ...state, loading: true }\n    case actions.GET_AUTHORS_SUCCESS:\n      return { ...state, authors: action.payload, loading: false, hasErrors: false }\n    case actions.GET_AUTHORS_FAILURE:\n      return { ...state, loading: false, hasErrors: true }\n    default:\n      return state\n  }\n}\n","export const GET_CATEGORIES = 'GET CATEGORIES'\nexport const GET_CATEGORIES_SUCCESS = 'GET_CATEGORIES_SUCCESS'\nexport const GET_CATEGORIES_FAILURE = 'GET_CATEGORIES_FAILURE'\n\nexport const getCategories = () => ({ type: GET_CATEGORIES})\nexport const getCategoriesSuccess = Categories => ({\n  type: GET_CATEGORIES_SUCCESS,\n  payload: Categories,\n})\nexport const getCategoriesFailure = () => ({ type: GET_CATEGORIES_FAILURE })\n\nexport function fetchCategories() {\n  return async dispatch => {\n    dispatch(getCategories())\n\n    try {\n      const response = await fetch('http://localhost:3000/category')\n      const data = await response.json()\n      console.log(data);\n\n      dispatch(getCategoriesSuccess(data))\n    } catch (error) {\n      dispatch(getCategoriesFailure())\n    }\n  }\n}","import * as actions from '../actions/categoriesAction'\n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  categories: [],\n}\n\nexport default function categoriesReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.GET_CATEGORIES:\n      return { ...state, loading: true }\n    case actions.GET_CATEGORIES_SUCCESS:\n      return { categories: action.payload, loading: false, hasErrors: false }\n    case actions.GET_CATEGORIES_FAILURE:\n      return { ...state, loading: false, hasErrors: true }\n    default:\n      return state\n  }\n}\n","export const GET_BOOK = 'GET BOOK'\nexport const GET_BOOK_SUCCESS = 'GET_BOOK_SUCCESS'\nexport const GET_BOOK_FAILURE = 'GET_BOOK_FAILURE'\n\nexport const getBook= () => ({ type: GET_BOOK})\nexport const getBookSuccess = book => ({\n  type: GET_BOOK_SUCCESS,\n  payload: book,\n})\nexport const getBookFailure = () => ({ type: GET_BOOK_FAILURE })\n\nexport function fetchBook(id) {\n  return async dispatch => {\n    // debugger\n    dispatch(getBook())\n\n    try {\n      const response = await fetch(`http://localhost:3000/book/${id}`)\n      const data = await response.json()\n      console.log(data);\n\n      dispatch(getBookSuccess(data))\n    } catch (error) {\n      dispatch(getBookFailure())\n    }\n  }\n}\n\nexport const CREATE_BOOK = 'CREATE_BOOK'\nexport const CREATE_BOOK_SUCCESS = 'CREATE_BOOK_SUCCESS'\nexport const CREATE_BOOK_FAILURE = 'CREATE_BOOK_FAILURE'\n\nexport const createBookFailure = 'CREATE_BOOK_FAILURE'\n\n\nexport const makeBook = () => ({ type: CREATE_BOOK})\n\nexport function createBook(){\n  return async dispatch => {\n    dispatch(makeBook()) \n\n    try {\n      const response = await fetch('http://localhost:3000/book')\n      const data = await response.json() \n      console.log(data);\n\n      dispatch(getBookSuccess(data)) \n    } catch(error) {\n      dispatch(getBookFailure())\n    }\n  }\n}","import * as actions from '../actions/bookAction'\n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  books: [],\n}\n\nexport default function bookReducer(state = initialState, action) {\n  console.log('payload')\n  console.log(action.payload);\n  switch (action.type) {\n    case actions.GET_BOOK:\n      return { ...state, loading: true }\n    case actions.GET_BOOK_SUCCESS:\n      return { book: action.payload, loading: false, hasErrors: false }\n    case actions.GET_BOOK_FAILURE:\n      return { ...state, loading: false, hasErrors: true }\n    default:\n      return state\n  }\n}\n","import {createStore, applyMiddleware, compose, combineReducers} from 'redux'\nimport thunk from 'redux-thunk';\nimport booksReducer from './reducers/booksReducer'\nimport authorReducer from './reducers/authorReducer';\nimport categoriesReducer from './reducers/categoriesReducer';\nimport bookReducer from './reducers/bookReducer'\n\n\n\nconst reducer = combineReducers({\n  books: booksReducer,\n  book: bookReducer, \n  authors: authorReducer,\n  categories: categoriesReducer\n}) \n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__|| compose; \n\n\nconst store = createStore(reducer, composeEnhancer(applyMiddleware(thunk)))\n\n\n\nexport default store ","export const GET_AUTHORS = 'GET COMMENTS'\nexport const GET_AUTHORS_SUCCESS = 'GET_AUTHORS_SUCCESS'\nexport const GET_AUTHORS_FAILURE = 'GET_AUTHORS_FAILURE'\n\nexport const getAuthor = () => ({ type: GET_AUTHORS })\nexport const getAuthorsSuccess = authors => ({\n  type: GET_AUTHORS_SUCCESS,\n  payload: authors,\n})\nexport const getAuthorsFailure = () => ({ type: GET_AUTHORS_FAILURE })\n\nexport function fetchAuthor(authorID) {\n  return async dispatch => {\n    dispatch(getAuthor())\n\n    try {\n      const response = await fetch(\n        `http://localhost:3000/author/${authorID}`\n      \n      )\n      const data = await response.json()\n      console.log(data);\n\n      dispatch(getAuthorsSuccess(data))\n    } catch (error) {\n      dispatch(getAuthorsFailure())\n    }\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Book = ({book, excerpt, onDelete}) => { \n  const author = book.author;\n  const category = book.categoryName;\n  return (\n\n  <article className={excerpt ? 'book-excerpt' : 'book'}>\n    <h2>{book.title}</h2>\n    \n    <img src={book.img} alt={`${book.title} Book Cover`}/>\n\n    {category &&\n      <p>{category}</p>\n    }\n\n    {author &&\n      <>\n      <span>{author.name}</span>\n      <p>{author.bio}</p>\n      </>\n    }\n\n  \n    {excerpt && (\n      <Link to={`/book/${book.id}`} className=\"button\">\n        View Book\n      </Link>\n    )}\n\n    {onDelete && <button onClick={onDelete}>Delete</button>}\n  </article>\n)}","\nexport const GET_AUTHORS = 'GET AUTHORS'\nexport const GET_AUTHORS_SUCCESS = 'GET_AUTHORS_SUCCESS'\nexport const GET_AUTHORS_FAILURE = 'GET_AUTHORS_FAILURE'\n\nexport const getAuthors = () => ({ type: GET_AUTHORS})\nexport const getAuthorsSuccess = author => ({\n  type: GET_AUTHORS_SUCCESS,\n  payload: author,\n})\nexport const getAuthorFailure = () => ({ type: GET_AUTHORS_FAILURE })\n\nexport function fetchAuthors() {\n  return async dispatch => {\n    dispatch(getAuthors())\n\n    try {\n      const response = await fetch('http://localhost:3000/author')\n      const data = await response.json()\n      console.log(data);\n\n      dispatch(getAuthorsSuccess(data))\n    } catch (error) {\n      dispatch(getAuthorFailure())\n    }\n  }\n}\n","import React from 'react'; \nimport { connect } from 'react-redux';\nimport {fetchCategories } from '../actions/categoriesAction';\nimport {fetchAuthors} from '../actions/authorsAction'\n\n\nclass BookForm extends React.Component {\n\n  initialState = {\n    img: '', \n    title: '', \n    selectionAuthorID: -1,\n    selectionAuthorName: '',\n    addedAuthorID: 0,\n    addAuthorName: '',\n    categoryID: -1,\n    categoryName: ''\n\n  };\n\n  state = this.initialState;\n\n  // (:title, :img, :author_id, :category_id)\n\n  handleSubmit = async (e) => {\n    e.preventDefault()\n    console.log(this.state);\n    let author;\n    if (this.state.selectionAuthorID === -1) {\n      let authorResponse = await fetch('http://localhost:3000/author', \n        {\n          method: 'POST',\n          body: JSON.stringify({\n            name: this.state.addAuthorName,\n            bio: '',\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n\n      author = await authorResponse.json();\n    }\n      let booksResponse = await fetch('http://localhost:3000/book', {\n        method: 'POST',\n        body: JSON.stringify({\n          title: this.state.title,\n          img: this.state.img,\n          author_id: author !== undefined ? author.id : this.state.selectionAuthorID,\n          category_id: this.state.categoryID,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      \n      this.setState(this.initialState);\n      this.props.onSubmit();\n      console.log(booksResponse)\n  };\n\n  handleChange = (e) => {\n    console.log(e.target);\n    this.setState({[e.target.title]: e.target.value})\n    console.log(e, 'chaangeed');\n  }\n\n  handleAuthorSelect = (e) => {\n    this.setState({selectionAuthorID: e.target.value})\n  }\n\n  handleAuthorUpdate = (e) => {\n    this.setState({addAuthorName: e.target.value})\n  }\n\n  handleCategorySelection = (e) => {\n    this.setState({categoryID: e.target.value})\n  }\n\n  componentDidMount() {\n    this.props.dispatch(fetchCategories())\n    this.props.dispatch(fetchAuthors())\n  }\n\n\n  render() { \n\n    return ( \n      <div> \n        <form onSubmit={this.handleSubmit}>\n          <label> \n            Title: \n            <input type='text' title='title' value={this.state.value} onChange={this.handleChange}/>\n            Img:\n            </label> \n            <input type='text' title='img' value={this.state.value} onChange={this.handleChange}/>\n\n            <label>Select Author:</label>\n\n            <select value={this.state.selectionAuthorID} onChange={this.handleAuthorSelect}>\n              {this.props.authors.map(({name, id}) => <option value={`${id}`}>{name}</option>)}\n              <option value={-1}>Add New Author</option>\n            </select>\n\n            {this.state.selectionAuthorID === -1 &&\n              <>\n              <label>Author:</label>\n              <input \n                type='text' \n                title='author' \n                value={this.state.addAuthorName}\n                onChange={this.handleAuthorUpdate}\n                />\n                </>\n            }\n            <label>Category:</label>\n\n            <select value={this.state.categoryID} onChange={this.handleCategorySelection}>\n              {this.props.categories.map(({id, name}) => <option value={id}>{name}</option>)}\n            </select>\n\n            <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    ); \n  } \n}\n\n  const mapDispatchToProps = state => ({\n    authors: state.authors.authors,\n    categories: state.categories.categories,\n\n  })\n\nexport default connect(mapDispatchToProps)(BookForm);","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchBooks } from '../actions/booksAction'\n\nimport { Book } from '../container/Book'\nimport BookForm from '../container/bookForm'\n\n\nconst BooksPage = ({ dispatch, loading, books, hasErrors }) => {\n\n  const [isAddingBook, setIsAddingBook] = useState(false)\n  \n  useEffect(() => {\n    dispatch(fetchBooks())\n  }, [dispatch])\n\n  const onDelete = async (id) => {\n    const response = await fetch(`http://localhost:3000/book/${id}`, {\n      method: 'DELETE',\n    });\n\n    dispatch(fetchBooks());\n  }\n\n  const renderBooks = () => {\n    if (loading) return <p>Loading books...</p>\n    if (hasErrors) return <p>Unable to display books.</p>\n\n    return books.map(book => <Book key={book.id} book={book} excerpt onDelete={() => onDelete(book.id)} />)\n  }\n  const showHideAddBookForm = () => {\n    setIsAddingBook(!isAddingBook)\n    dispatch(fetchBooks())\n  }\n  \n  const onSubmit = () => {\n      showHideAddBookForm();\n  }\n  return (\n    <>\n  {isAddingBook \n    ? ( \n      <>\n      <BookForm onSubmit={onSubmit} />\n      <button onClick={showHideAddBookForm}>Cancel</button>\n    </>\n    )\n    : (\n      <>\n      <button onClick={showHideAddBookForm}>Add Book</button>\n      <section>\n      <h1>Books</h1>\n      {renderBooks()}\n    </section>\n    </>\n    )\n  }\n    </>\n  )\n}\n\nconst mapStateToProps = state => ({\n  loading: state.books.loading,\n  books: state.books.books,\n  hasErrors: state.books.hasErrors,\n  categories: state.categories.categories,\n\n})\n\nexport default connect(mapStateToProps)(BooksPage)\n\n\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst DashboardPage = () => (\n  <section>\n    <h1>Dashboard</h1>\n    <p>This is the dashboard.</p>\n    <Link to=\"/books\" className=\"button\">\n      View Books\n    </Link>\n  </section>\n)\n\nexport default DashboardPage","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Navbar = () => (\n  <nav>\n    <section>\n      <Link to=\"/\">Dashboard</Link>\n      <Link to=\"/books\">Books</Link>\n    </section>\n  </nav>\n)\n","import React, {useState, useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport {fetchCategories } from '../actions/categoriesAction';\nimport {fetchAuthors} from '../actions/authorsAction'\n\n\nconst UpdateBookForm = ({book, authors, categories, dispatch, onUpdate}) => {\n  const [localBook, updateBook] = useState(book);\n  const [addNewAuthorStatus, updateAddNewAuthorStatus] = useState('')\n\n  useEffect(() => {\n    dispatch(fetchCategories())\n    dispatch(fetchAuthors());\n  }, [dispatch])\n\n  const updateBookRequest = async (e) => {\n    e.preventDefault();\n    let author;\n    if (localBook.author_id === -1) {\n      const authorResponse = fetch(`http://localhost:3000/author`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: this.state.addAuthorName,\n          bio: '',\n        })\n      })\n\n      author = await authorResponse.json()\n    }\n\n    const patchResponse =  await fetch(`http://localhost:3000/book/${localBook.id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        ...localBook,\n        author_id: author !== undefined ? author.id : localBook.author_id\n      })\n    })\n\n    \n\n    onUpdate()\n  }\n\n  return (\n    <form onSubmit={updateBookRequest}>\n      <label>Title:</label>\n      <input type='text' value={localBook.title} onChange={(e) => updateBook({...localBook, title: e.target.value})}/>\n      <label>Img:</label>\n      <input type='text' value={localBook.img} onChange={(e) => updateBook({...localBook, img: e.target.value})}/>\n      <label>Author:</label>\n      <select value={localBook.author_id} onChange={(e) => updateBook({...localBook, author_id: e.target.value})}>\n        {authors.map((author) => <option value={author.id}>{author.name}</option>)}\n        <option value={-1}>{'Add New Author'}</option>\n      </select>\n      {localBook.author_id === -1 &&\n        <input type='text' value={updateAddNewAuthorStatus} onChange={(e) => updateAddNewAuthorStatus(e.target.value)}/>\n      }\n      <label>Category:</label>\n      <select value={localBook.category_id} onChange={(e) => updateBook({...localBook, category_id: e.target.value})}>\n        {categories.map((category) => <option value={category.id}>{category.name}</option>)} \n      </select>\n      <input type=\"submit\" value=\"Update\" />\n    </form>\n  );\n}\n\nconst mapDispatchToProps = state => ({\n  authors: state.authors.authors,\n  categories: state.categories.categories,\n\n})\n\nexport default connect(mapDispatchToProps)(UpdateBookForm);","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchCategories } from '../actions/categoriesAction'\n\nimport {fetchBook } from '../actions/bookAction'\nimport { fetchAuthor } from '../actions/authorAction'\n\nimport { Book } from '../container/Book'\nimport { Author } from '../container/Author'\nimport UpdateBookForm from './UpdateBookForm'\n\nconst SingleBook = ({\n  match,\n  dispatch,\n  book,\n  hasErrors,\n  loading,\n  categories,\n}) => {\n  const { id } = match.params\n\n  const [newBook, setBook] = useState();\n  const [updateBook, setUpdateBook] = useState(false);\n\n  useEffect(() => {\n    console.log(id);\n    dispatch(fetchCategories())\n    dispatch(fetchBook(id))\n    \n\n    // dispatch(fetchAutchor(id))\n    console.log(book, id)\n  \n\n  }, [dispatch, match, updateBook, book])\n\n  const getCategory = (id) => {\n    return categories.filter((category) =>  { \n      console.log(categories)\n      return category.id === id \n    })[0];\n    \n\n  }\n  \n  useEffect(() => {\n\n    console.log(book)\n    if (newBook === undefined && book !== undefined && categories !== undefined) {\n        const {author_id, category_id} = book;\n\n        const categoryName = getCategory(category_id).name;\n        fetch(`http://localhost:3000/author/${author_id}`)\n        .then(response => { \n          console.log(response)\n          return response.json()})\n        .then(json => {\n          console.log(json) \n          return setBook({...book, categoryName,  author: json}) \n        })\n        .catch(error => console.log(error))\n    }\n  }, [book])\n\n  \n\n  const renderBook = () => {\n    if (loading.book) return <p>Loading book...</p>\n    if (hasErrors.book) return <p>Unable to display book.</p>\n  }\n\n\n  const renderAuthor = () => {\n    // if (loading.author) return <p>Loading authors...</p>\n    // if (hasErrors.author) return <p>Unable to display author.</p>\n  \n    return (\n      <>\n      {newBook &&\n      <Book key={newBook.id}  book={newBook}/>\n      }\n      </>\n    )\n  }\n\n  return (\n    <section>\n    { updateBook \n      ? <UpdateBookForm book={newBook} onUpdate={()=> { \n        setUpdateBook(false)\n       \n        \n\n      }}/>\n      : \n      <>\n        {renderBook()}\n        <h2>Book</h2>\n        {newBook && renderAuthor()}\n        <button onClick={() => setUpdateBook(true)}>Update Book Info</button>\n      </>\n      \n    }\n    </section>\n  )\n}\n\nconst mapStateToProps = state => ({\n  book: state.book.book,\n  authors: state.authors.authors,\n  loading: { books: state.books.loading, authors: state.authors.loading },\n  hasErrors: { books: state.books.hasErrors, authors: state.authors.hasErrors },\n  categories: state.categories.categories,\n})\n\n\n\nexport default connect(mapStateToProps)(SingleBook)\n","import React from 'react'; \nimport { Link } from 'react-router-dom'\nimport {getBooks } from '../actions/booksAction';\nimport {connect} from 'react-redux'\n\nclass HomePage extends React.Component {\n\n  componentDidMount() {\n    this.props.getBooks()\n    console.log('fetching books!!' );\n  }\n\n  render() { \n    return ( \n      <div> \n        <h1> This is the HomePage!</h1>\n        <Link to='/books'>Books Page! </Link>  \n        <span><button onClick={getTheBooks}> Click me </button></span>\n      </div>\n      );\n  }\n}\n\nconst getTheBooks = (e) => {\n  console.log(getBooks)\n  console.log('get the bookkks!!', e);\n} \n\n\nconst mapDispatchToProps = { \n  getBooks \n}\n\nconst mapStateToProps = state => {\n  console.log('mapping state to props', state);\n  return state\n}\n\nexport default connect (mapStateToProps, mapDispatchToProps)(HomePage);","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\n\nimport BooksPage from './presentational/BooksPage'\nimport Dashboard from './container/Dashboard';\nimport { Navbar } from './presentational/Navbar'\nimport SingleBook from './presentational/SingleBook';\nimport Homepage from './container/Homepage';\n\n\nclass App extends Component {\n  render() {\n    return ( \n      <React.Fragment>\n        <Router> \n          <Navbar />\n            <Switch> \n              <Route exact path='/' component={Dashboard}/>\n              <Route exact path=\"/books\" component={BooksPage} /> \n              <Route exact path=\"/book/:id\" component={SingleBook} />\n              <Route exact path= \"/homepage\" component={Homepage}/>\n            </Switch>\n          </Router>\n        </React.Fragment>\n        );\n      }\n  } \n\nexport default App \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\n\nReactDOM.render(\n  <Provider store={store}>  \n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}